## はじめに

このドキュメントは、Cline / RooCode が開発を行う際のガイドラインをまとめたものです。
このガイドラインに従って、開発を行ってください。

## 基本ルール

- 指示に従う:
  - 要件や指示に従って作業を進める
  - 作業の進捗や問題が発生した場合は適宜報告

- 自律的な問題解決:
  - エラーや何かしらの問題が発生したら、自律的に問題分析と解決案を提示
  - 複数のアプローチがある場合は、推奨案を明示

- 既存コードの尊重:
  - 既存のコードスタイルやパターンがある場合には、それに従う
  - 大幅な変更が必要な場合は理由を説明

## 技術スタック

このリポジトリは chezmoi で管理された dotfiles です。

## セキュリティ

### 機密ファイル

以下を読み取ったり変更したりすることは絶対に避けてください。

- .env ファイル
- */config/secrets.*
- */*.pem
- API キー、トークン、認証情報を含むファイル全般

### セキュリティプラクティス

- 機密ファイルを絶対にコミットしない
- シークレット情報は環境変数を使用する
- ログや出力に認証情報を含めない

## コーディングガイドライン

### 一般原則

- コードは必ず完全な形で提供する（断片的なコードは不可）
- シンプルで読みやすいコードを書く
- 適切な命名（変数、関数、クラスなど）を行う
- 関数は単一の責任を持つように設計する
- エラーハンドリングを適切に実装する
- コメントは必要な箇所にのみ付ける
- テストコードも同時に生成する
- パフォーマンスとセキュリティを考慮したコードを生成する

### 依存関係の管理

- 依存関係は必要最小限に抑える
- 新しい依存関係を追加する場合は、その必要性を説明する
- 同等の機能が複数の方法で実現できる場合は、依存関係が少ない方法を優先する
- 既存のツールや標準ライブラリで実現できる機能には、新たな依存関係を追加しない

## git 運用ルール

### ブランチ運用

- main ブランチに直接 push しない
- 作業時は feature ブランチを使用する
- コミットメッセージは Conventional Commits に従う
- コミットメッセージは英語で記述する

### 変更の分割

- 複数の独立した変更は、別々のfeatureブランチに分ける
  - ただし、関連する変更は同じfeatureブランチに含める
- 各コミットは論理的に独立した変更を含むようにする
- コミットは小さく保ち、1つの目的に集中させる

### プルリクエスト（PR）

- 各featureブランチに対して個別のPRを作成する
- PRのタイトルは変更内容を簡潔に表現する
- PR説明文には以下の情報を含める：
  - 変更の目的と背景
  - 実装の概要
  - テスト方法（該当する場合）
  - 関連する課題やチケットへの参照
- レビュアーが理解しやすいように、変更箇所を明確に説明する

### GitHub CLI (gh) の使用

- PRの作成には GitHub CLI (`gh`) を使用する
- fish shell で PR説明文に改行を含める場合は、以下のいずれかの方法を使用する：
  - コマンド置換を使用する：
    ```fish
    gh pr create --title "タイトル" --body (echo "1行目の説明

    2行目の説明")
    ```
  - 一時ファイルを作成して `--body-file` オプションを使用する：
    ```fish
    echo "1行目の説明

    2行目の説明" > pr_body.txt
    gh pr create --title "タイトル" --body-file pr_body.txt
    rm pr_body.txt
    ```
  - 単純な改行の場合は、実際の改行を含む文字列を使用する：
    ```fish
    gh pr create --title "タイトル" --body "1行目の説明

    2行目の説明"
    ```
- 文字列内の `\n` はエスケープシーケンスとして扱われないため、実際の改行を使用する
